#!/usr/bin/env python3

from collections import OrderedDict
import os
import sys

import launch
import launch.actions
import launch.events
import launch.substitutions
from launch import LaunchDescription
from launch import LaunchService
from launch.event_handlers import OnProcessExit


class LaunchTestService():

    def __init__(self):
        self.__test_processes = []
        self.__test_returncodes = OrderedDict()

    def add_test_action(self, launch_description, action):
        """
        Add action used for testing.

        If either all test actions exited with a return code of zero or any
        test action exited with a non-zero return code a shutdown event is
        emitted.
        """
        assert isinstance(action, launch.actions.ExecuteProcess), \
            'The passed actions must be ExecuteProcess actions'

        self.__test_processes.append(action)

        def on_test_process_exit(event, context):
            nonlocal action
            nonlocal self
            self.__test_returncodes[action] = event.returncode

            if len(self.__test_returncodes) == len(self.__test_processes):
                shutdown_event = launch.events.Shutdown(
                    reason='all tests finished')
                return launch.actions.EmitEvent(event=shutdown_event)

        launch_description.add_action(
            launch.actions.RegisterEventHandler(OnProcessExit(
                target_action=action, on_exit=on_test_process_exit,
            ))
        )

    def run(self, launch_service, *args, **kwargs):
        """
        Invokes the `run` method of the launch service.

        :returns: If the return value of the parent method is zero but any of
          the test processes exited with a non-zero return code the return of
          the first failed test process is returned.
        """
        rc = launch_service.run(*args, **kwargs)
        if not rc:
            for test_process_rc in self.__test_returncodes.values():
                if test_process_rc:
                    rc = test_process_rc
                    break
        return rc


def main(argv=sys.argv[1:]):
    ld = LaunchDescription()

    web_server_action = launch.actions.ExecuteProcess(
        cmd=['@TEST_WEB_SERVER_EXECUTABLE@'])
    ld.add_action(web_server_action)

    test_directory = '@CMAKE_CURRENT_SOURCE_DIR@'

    test1_action = launch.actions.ExecuteProcess(
        cmd=[
            sys.executable, '-u',
            os.path.join(test_directory, 'simple_http_requests_test.py')])
    ld.add_action(test1_action)

    test2_action = launch.actions.ExecuteProcess(
        cmd=[
            sys.executable, '-u',
            os.path.join(test_directory, 'websocket_test.py')])
    ld.add_action(test2_action)

    lts = LaunchTestService()
    lts.add_test_action(ld, test1_action)
    lts.add_test_action(ld, test2_action)

    ls = LaunchService(argv=argv)
    ls.include_launch_description(ld)
    return lts.run(ls)


if __name__ == '__main__':
    sys.exit(main())
